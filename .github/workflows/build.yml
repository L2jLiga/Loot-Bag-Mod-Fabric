name: Build

on:
  # Trigger the workflow on pushes to only the 'main' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches: [master]
  # Trigger the workflow on any pull request
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.artifact.outputs.version }}
      changelog: ${{ steps.artifact.outputs.changelog }}
    steps:
      - name: Fetch Sources
        uses: actions/checkout@v3

      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1

      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: microsoft
          java-version: 17
          cache: gradle

      - name: Build
        run: ./gradlew build

      - name: Prepare Artifact Metadata
        id: artifact
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          ARCHIVES_BASE_NAME="$(echo "$PROPERTIES" | grep "^archives_base_name:" | cut -f2- -d ' ')"
          MOD_VERSION="$(echo "$PROPERTIES" | grep "^mod_version:" | cut -f2- -d ' ')"
          MINECRAFT_VERSION="$(echo "$PROPERTIES" | grep "^minecraft_version:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"

          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

          echo "filename=$ARCHIVES_BASE_NAME-$MOD_VERSION-$MINECRAFT_VERSION.jar" >> $GITHUB_OUTPUT
          echo "version=$MOD_VERSION-$MINECRAFT_VERSION" >> $GITHUB_OUTPUT
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/libs/${{ steps.artifact.outputs.filename }}

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          CHANGELOG="${{ needs.build.outputs.changelog }}"
          CHANGELOG="${CHANGELOG//'%25'/'%'}"
          CHANGELOG="${CHANGELOG//'%0A'/$'\n'}"
          CHANGELOG="${CHANGELOG//'%0D'/$'\r'}"

          gh release create v${{ needs.build.outputs.version }} \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$CHANGELOG"
